"use strict";
var core_1 = require('@angular/core');
var TreeNodeComponent = (function () {
    function TreeNodeComponent(elementRef) {
        this.elementRef = elementRef;
    }
    TreeNodeComponent.prototype.onDrop = function ($event) {
        this.node.mouseAction('drop', $event.event, {
            from: $event.element,
            to: { parent: this.node, index: 0 }
        });
    };
    TreeNodeComponent.prototype.allowDrop = function (element) {
        if (this.node.options.readOnly)
            return false;
        return this.node.options.allowDrop(element, { parent: this.node, index: 0 });
    };
    TreeNodeComponent.prototype.getNodePadding = function () {
        return this.node.options.levelPadding * (this.node.level - 1) + 'px';
    };
    TreeNodeComponent.prototype.ngAfterViewInit = function () {
        this.node.elementRef = this.elementRef;
    };
    TreeNodeComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'TreeNode',
                    encapsulation: core_1.ViewEncapsulation.None,
                    styles: [
                        '.tree-children.tree-children-no-padding { padding-left: 0 }',
                        '.tree-children { padding-left: 10px }',
                        ".node-content-wrapper {\n      display: flex;\n      padding: 2px 5px;\n    }",
                        '.node-wrapper { display: block }',
                        '.node-wrapper span { vertical-align: middle; line-height: 1.5em }',
                        '.tree-node-active > .node-wrapper > .node-content-wrapper { background: #beebff }',
                        '.tree-node-active.tree-node-focused > .node-wrapper > .node-content-wrapper { background: #beebff }',
                        '.tree-node-focused > .node-wrapper > .node-content-wrapper { background: #e7f4f9 }',
                        '.node-content-wrapper:hover { background: #f7fbff }',
                        '.tree-node-active > .node-wrapper > .node-content-wrapper, .tree-node-focused > .node-content-wrapper, .node-content-wrapper:hover { box-shadow: inset 0 0 1px #999; }',
                        '.node-content-wrapper.is-dragging-over { background: #ddffee; box-shadow: inset 0 0 1px #999; }',
                        '.node-content-wrapper.is-dragging-over-disabled { opacity: 0.5 }',
                        ".toggle-children {\n        display: flex;\n        margin-right: 3px;\n    }",
                        ".toggle-children-placeholder {\n        display: flex;\n        margin-right: 2px;\n    }"
                    ],
                    template: "\n    <div\n      *ngIf=\"!node.isHidden\"\n      class=\"tree-node tree-node-level-{{ node.level }}\"\n      [class.tree-node-expanded]=\"node.isExpanded && node.isFolder\"\n      [class.tree-node-collapsed]=\"node.isCollapsed && node.isFolder\"\n      [class.tree-node-leaf]=\"node.isLeaf\"\n      [class.tree-node-active]=\"node.isActive\"\n      [class.tree-node-focused]=\"node.isFocused\">\n\n      <TreeNodeDropSlot\n        *ngIf=\"nodeIndex === 0\"\n        [dropIndex]=\"nodeIndex\"\n        [node]=\"node.parent\"\n        ></TreeNodeDropSlot>\n\n        <div class=\"node-wrapper\" [style.padding-left]=\"getNodePadding()\">\n          \n          <div class=\"node-content-wrapper\"\n            #nodeContentWrapper\n            (click)=\"node.mouseAction('click', $event)\"\n            (dblclick)=\"node.mouseAction('dblClick', $event)\"\n            (contextmenu)=\"node.mouseAction('contextMenu', $event)\"\n            (treeDrop)=\"onDrop($event)\"\n            [treeAllowDrop]=\"allowDrop.bind(this)\"\n            [treeDrag]=\"node\"\n            [treeDragEnabled]=\"node.allowDrag()\">\n            <span\n              *ngIf=\"node.isFolder\"\n              class=\"toggle-children-wrapper\"\n              (click)=\"node.mouseAction('expanderClick', $event)\">\n              <span class=\"toggle-children\"><i class=\"material-icons\">{{ node.isExpanded ? 'folder_open' : 'folder' }}</i></span>\n            </span>\n            <span\n              *ngIf=\"!node.isFolder\"\n              class=\"toggle-children-placeholder\">\n              <i class=\"material-icons\">insert_drive_file</i>\n            </span>\n            <TreeNodeContent [node]=\"node\" [treeNodeContentTemplate]=\"treeNodeContentTemplate\"></TreeNodeContent>\n          </div>\n        </div>\n\n      <div [class.tree-children]=\"true\"\n           [class.tree-children-no-padding]=\"node.options.levelPadding\"\n           *ngIf=\"node.isExpanded\">\n        <div *ngIf=\"node.children\">\n          <TreeNode\n            *ngFor=\"let node of node.children; let i = index\"\n            [node]=\"node\"\n            [nodeIndex]=\"i\"\n            [treeNodeContentTemplate]=\"treeNodeContentTemplate\"\n            [loadingTemplate]=\"loadingTemplate\">\n          </TreeNode>\n        </div>\n        <LoadingComponent\n          [style.padding-left]=\"getNodePadding()\"\n          class=\"tree-node-loading\"\n          *ngIf=\"!node.children\"\n          [loadingTemplate]=\"loadingTemplate\"\n        ></LoadingComponent>\n      </div>\n      <TreeNodeDropSlot\n        [dropIndex]=\"nodeIndex + 1\"\n        [node]=\"node.parent\"\n        ></TreeNodeDropSlot>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    TreeNodeComponent.ctorParameters = [
        { type: core_1.ElementRef, },
    ];
    TreeNodeComponent.propDecorators = {
        'node': [{ type: core_1.Input },],
        'nodeIndex': [{ type: core_1.Input },],
        'treeNodeContentTemplate': [{ type: core_1.Input },],
        'loadingTemplate': [{ type: core_1.Input },],
    };
    return TreeNodeComponent;
}());
exports.TreeNodeComponent = TreeNodeComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ub2RlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jb21wb25lbnRzL3RyZWUtbm9kZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFCQUE0RixlQUFlLENBQUMsQ0FBQTtBQU01RztJQU1FLDJCQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO0lBQzFDLENBQUM7SUFFRCxrQ0FBTSxHQUFOLFVBQU8sTUFBTTtRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQzFDLElBQUksRUFBRSxNQUFNLENBQUMsT0FBTztZQUNwQixFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO1NBQ3BDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxxQ0FBUyxHQUFULFVBQVUsT0FBTztRQUNmLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztZQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDN0MsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRUQsMENBQWMsR0FBZDtRQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDdkUsQ0FBQztJQUVELDJDQUFlLEdBQWY7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pDLENBQUM7SUFDSSw0QkFBVSxHQUEwQjtRQUMzQyxFQUFFLElBQUksRUFBRSxnQkFBUyxFQUFFLElBQUksRUFBRSxDQUFDO29CQUN4QixRQUFRLEVBQUUsVUFBVTtvQkFDcEIsYUFBYSxFQUFFLHdCQUFpQixDQUFDLElBQUk7b0JBQ3JDLE1BQU0sRUFBRTt3QkFDTiw2REFBNkQ7d0JBQzdELHVDQUF1Qzt3QkFDdkMsK0VBR0U7d0JBQ0Ysa0NBQWtDO3dCQUNsQyxtRUFBbUU7d0JBQ25FLG1GQUFtRjt3QkFDbkYscUdBQXFHO3dCQUNyRyxvRkFBb0Y7d0JBQ3BGLHFEQUFxRDt3QkFDckQsd0tBQXdLO3dCQUN4SyxpR0FBaUc7d0JBQ2pHLGtFQUFrRTt3QkFDbEUsK0VBR0U7d0JBQ0YsMkZBR0U7cUJBQ0g7b0JBQ0QsUUFBUSxFQUFFLDZuRkFrRVQ7aUJBQ0YsRUFBRyxFQUFFO0tBQ0wsQ0FBQztJQUNGLGtCQUFrQjtJQUNYLGdDQUFjLEdBQTZEO1FBQ2xGLEVBQUMsSUFBSSxFQUFFLGlCQUFVLEdBQUc7S0FDbkIsQ0FBQztJQUNLLGdDQUFjLEdBQTJDO1FBQ2hFLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLFlBQUssRUFBRSxFQUFFO1FBQzFCLFdBQVcsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLFlBQUssRUFBRSxFQUFFO1FBQy9CLHlCQUF5QixFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsWUFBSyxFQUFFLEVBQUU7UUFDN0MsaUJBQWlCLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxZQUFLLEVBQUUsRUFBRTtLQUNwQyxDQUFDO0lBQ0Ysd0JBQUM7QUFBRCxDQUFDLEFBeElELElBd0lDO0FBeElZLHlCQUFpQixvQkF3STdCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBFbGVtZW50UmVmLCBBZnRlclZpZXdJbml0LCBWaWV3RW5jYXBzdWxhdGlvbiwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRyZWVOb2RlIH0gZnJvbSAnLi4vbW9kZWxzL3RyZWUtbm9kZS5tb2RlbCc7XG5pbXBvcnQgeyBJVHJlZU5vZGVUZW1wbGF0ZSB9IGZyb20gJy4vdHJlZS1ub2RlLWNvbnRlbnQuY29tcG9uZW50JztcblxuXG5cbmV4cG9ydCBjbGFzcyBUcmVlTm9kZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAgbm9kZTpUcmVlTm9kZTtcbiAgIG5vZGVJbmRleDpudW1iZXI7XG4gICB0cmVlTm9kZUNvbnRlbnRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8SVRyZWVOb2RlVGVtcGxhdGU+O1xuICAgbG9hZGluZ1RlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICB9XG5cbiAgb25Ecm9wKCRldmVudCkge1xuICAgIHRoaXMubm9kZS5tb3VzZUFjdGlvbignZHJvcCcsICRldmVudC5ldmVudCwge1xuICAgICAgZnJvbTogJGV2ZW50LmVsZW1lbnQsXG4gICAgICB0bzogeyBwYXJlbnQ6IHRoaXMubm9kZSwgaW5kZXg6IDAgfVxuICAgIH0pO1xuICB9XG5cbiAgYWxsb3dEcm9wKGVsZW1lbnQpIHtcbiAgICBpZiAodGhpcy5ub2RlLm9wdGlvbnMucmVhZE9ubHkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5ub2RlLm9wdGlvbnMuYWxsb3dEcm9wKGVsZW1lbnQsIHsgcGFyZW50OiB0aGlzLm5vZGUsIGluZGV4OiAwIH0pO1xuICB9XG5cbiAgZ2V0Tm9kZVBhZGRpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZS5vcHRpb25zLmxldmVsUGFkZGluZyAqICh0aGlzLm5vZGUubGV2ZWwgLSAxKSArICdweCc7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5ub2RlLmVsZW1lbnRSZWYgPSB0aGlzLmVsZW1lbnRSZWY7XG4gIH1cbnN0YXRpYyBkZWNvcmF0b3JzOiBEZWNvcmF0b3JJbnZvY2F0aW9uW10gPSBbXG57IHR5cGU6IENvbXBvbmVudCwgYXJnczogW3tcbiAgc2VsZWN0b3I6ICdUcmVlTm9kZScsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIHN0eWxlczogW1xuICAgICcudHJlZS1jaGlsZHJlbi50cmVlLWNoaWxkcmVuLW5vLXBhZGRpbmcgeyBwYWRkaW5nLWxlZnQ6IDAgfScsXG4gICAgJy50cmVlLWNoaWxkcmVuIHsgcGFkZGluZy1sZWZ0OiAxMHB4IH0nLFxuICAgIGAubm9kZS1jb250ZW50LXdyYXBwZXIge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIHBhZGRpbmc6IDJweCA1cHg7XG4gICAgfWAsXG4gICAgJy5ub2RlLXdyYXBwZXIgeyBkaXNwbGF5OiBibG9jayB9JyxcbiAgICAnLm5vZGUtd3JhcHBlciBzcGFuIHsgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgbGluZS1oZWlnaHQ6IDEuNWVtIH0nLFxuICAgICcudHJlZS1ub2RlLWFjdGl2ZSA+IC5ub2RlLXdyYXBwZXIgPiAubm9kZS1jb250ZW50LXdyYXBwZXIgeyBiYWNrZ3JvdW5kOiAjYmVlYmZmIH0nLFxuICAgICcudHJlZS1ub2RlLWFjdGl2ZS50cmVlLW5vZGUtZm9jdXNlZCA+IC5ub2RlLXdyYXBwZXIgPiAubm9kZS1jb250ZW50LXdyYXBwZXIgeyBiYWNrZ3JvdW5kOiAjYmVlYmZmIH0nLFxuICAgICcudHJlZS1ub2RlLWZvY3VzZWQgPiAubm9kZS13cmFwcGVyID4gLm5vZGUtY29udGVudC13cmFwcGVyIHsgYmFja2dyb3VuZDogI2U3ZjRmOSB9JyxcbiAgICAnLm5vZGUtY29udGVudC13cmFwcGVyOmhvdmVyIHsgYmFja2dyb3VuZDogI2Y3ZmJmZiB9JyxcbiAgICAnLnRyZWUtbm9kZS1hY3RpdmUgPiAubm9kZS13cmFwcGVyID4gLm5vZGUtY29udGVudC13cmFwcGVyLCAudHJlZS1ub2RlLWZvY3VzZWQgPiAubm9kZS1jb250ZW50LXdyYXBwZXIsIC5ub2RlLWNvbnRlbnQtd3JhcHBlcjpob3ZlciB7IGJveC1zaGFkb3c6IGluc2V0IDAgMCAxcHggIzk5OTsgfScsXG4gICAgJy5ub2RlLWNvbnRlbnQtd3JhcHBlci5pcy1kcmFnZ2luZy1vdmVyIHsgYmFja2dyb3VuZDogI2RkZmZlZTsgYm94LXNoYWRvdzogaW5zZXQgMCAwIDFweCAjOTk5OyB9JyxcbiAgICAnLm5vZGUtY29udGVudC13cmFwcGVyLmlzLWRyYWdnaW5nLW92ZXItZGlzYWJsZWQgeyBvcGFjaXR5OiAwLjUgfScsXG4gICAgYC50b2dnbGUtY2hpbGRyZW4ge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDNweDtcbiAgICB9YCxcbiAgICBgLnRvZ2dsZS1jaGlsZHJlbi1wbGFjZWhvbGRlciB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMnB4O1xuICAgIH1gXG4gIF0sXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdlxuICAgICAgKm5nSWY9XCIhbm9kZS5pc0hpZGRlblwiXG4gICAgICBjbGFzcz1cInRyZWUtbm9kZSB0cmVlLW5vZGUtbGV2ZWwte3sgbm9kZS5sZXZlbCB9fVwiXG4gICAgICBbY2xhc3MudHJlZS1ub2RlLWV4cGFuZGVkXT1cIm5vZGUuaXNFeHBhbmRlZCAmJiBub2RlLmlzRm9sZGVyXCJcbiAgICAgIFtjbGFzcy50cmVlLW5vZGUtY29sbGFwc2VkXT1cIm5vZGUuaXNDb2xsYXBzZWQgJiYgbm9kZS5pc0ZvbGRlclwiXG4gICAgICBbY2xhc3MudHJlZS1ub2RlLWxlYWZdPVwibm9kZS5pc0xlYWZcIlxuICAgICAgW2NsYXNzLnRyZWUtbm9kZS1hY3RpdmVdPVwibm9kZS5pc0FjdGl2ZVwiXG4gICAgICBbY2xhc3MudHJlZS1ub2RlLWZvY3VzZWRdPVwibm9kZS5pc0ZvY3VzZWRcIj5cblxuICAgICAgPFRyZWVOb2RlRHJvcFNsb3RcbiAgICAgICAgKm5nSWY9XCJub2RlSW5kZXggPT09IDBcIlxuICAgICAgICBbZHJvcEluZGV4XT1cIm5vZGVJbmRleFwiXG4gICAgICAgIFtub2RlXT1cIm5vZGUucGFyZW50XCJcbiAgICAgICAgPjwvVHJlZU5vZGVEcm9wU2xvdD5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwibm9kZS13cmFwcGVyXCIgW3N0eWxlLnBhZGRpbmctbGVmdF09XCJnZXROb2RlUGFkZGluZygpXCI+XG4gICAgICAgICAgXG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtY29udGVudC13cmFwcGVyXCJcbiAgICAgICAgICAgICNub2RlQ29udGVudFdyYXBwZXJcbiAgICAgICAgICAgIChjbGljayk9XCJub2RlLm1vdXNlQWN0aW9uKCdjbGljaycsICRldmVudClcIlxuICAgICAgICAgICAgKGRibGNsaWNrKT1cIm5vZGUubW91c2VBY3Rpb24oJ2RibENsaWNrJywgJGV2ZW50KVwiXG4gICAgICAgICAgICAoY29udGV4dG1lbnUpPVwibm9kZS5tb3VzZUFjdGlvbignY29udGV4dE1lbnUnLCAkZXZlbnQpXCJcbiAgICAgICAgICAgICh0cmVlRHJvcCk9XCJvbkRyb3AoJGV2ZW50KVwiXG4gICAgICAgICAgICBbdHJlZUFsbG93RHJvcF09XCJhbGxvd0Ryb3AuYmluZCh0aGlzKVwiXG4gICAgICAgICAgICBbdHJlZURyYWddPVwibm9kZVwiXG4gICAgICAgICAgICBbdHJlZURyYWdFbmFibGVkXT1cIm5vZGUuYWxsb3dEcmFnKClcIj5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICpuZ0lmPVwibm9kZS5pc0ZvbGRlclwiXG4gICAgICAgICAgICAgIGNsYXNzPVwidG9nZ2xlLWNoaWxkcmVuLXdyYXBwZXJcIlxuICAgICAgICAgICAgICAoY2xpY2spPVwibm9kZS5tb3VzZUFjdGlvbignZXhwYW5kZXJDbGljaycsICRldmVudClcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0b2dnbGUtY2hpbGRyZW5cIj48aSBjbGFzcz1cIm1hdGVyaWFsLWljb25zXCI+e3sgbm9kZS5pc0V4cGFuZGVkID8gJ2ZvbGRlcl9vcGVuJyA6ICdmb2xkZXInIH19PC9pPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICpuZ0lmPVwiIW5vZGUuaXNGb2xkZXJcIlxuICAgICAgICAgICAgICBjbGFzcz1cInRvZ2dsZS1jaGlsZHJlbi1wbGFjZWhvbGRlclwiPlxuICAgICAgICAgICAgICA8aSBjbGFzcz1cIm1hdGVyaWFsLWljb25zXCI+aW5zZXJ0X2RyaXZlX2ZpbGU8L2k+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8VHJlZU5vZGVDb250ZW50IFtub2RlXT1cIm5vZGVcIiBbdHJlZU5vZGVDb250ZW50VGVtcGxhdGVdPVwidHJlZU5vZGVDb250ZW50VGVtcGxhdGVcIj48L1RyZWVOb2RlQ29udGVudD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgW2NsYXNzLnRyZWUtY2hpbGRyZW5dPVwidHJ1ZVwiXG4gICAgICAgICAgIFtjbGFzcy50cmVlLWNoaWxkcmVuLW5vLXBhZGRpbmddPVwibm9kZS5vcHRpb25zLmxldmVsUGFkZGluZ1wiXG4gICAgICAgICAgICpuZ0lmPVwibm9kZS5pc0V4cGFuZGVkXCI+XG4gICAgICAgIDxkaXYgKm5nSWY9XCJub2RlLmNoaWxkcmVuXCI+XG4gICAgICAgICAgPFRyZWVOb2RlXG4gICAgICAgICAgICAqbmdGb3I9XCJsZXQgbm9kZSBvZiBub2RlLmNoaWxkcmVuOyBsZXQgaSA9IGluZGV4XCJcbiAgICAgICAgICAgIFtub2RlXT1cIm5vZGVcIlxuICAgICAgICAgICAgW25vZGVJbmRleF09XCJpXCJcbiAgICAgICAgICAgIFt0cmVlTm9kZUNvbnRlbnRUZW1wbGF0ZV09XCJ0cmVlTm9kZUNvbnRlbnRUZW1wbGF0ZVwiXG4gICAgICAgICAgICBbbG9hZGluZ1RlbXBsYXRlXT1cImxvYWRpbmdUZW1wbGF0ZVwiPlxuICAgICAgICAgIDwvVHJlZU5vZGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8TG9hZGluZ0NvbXBvbmVudFxuICAgICAgICAgIFtzdHlsZS5wYWRkaW5nLWxlZnRdPVwiZ2V0Tm9kZVBhZGRpbmcoKVwiXG4gICAgICAgICAgY2xhc3M9XCJ0cmVlLW5vZGUtbG9hZGluZ1wiXG4gICAgICAgICAgKm5nSWY9XCIhbm9kZS5jaGlsZHJlblwiXG4gICAgICAgICAgW2xvYWRpbmdUZW1wbGF0ZV09XCJsb2FkaW5nVGVtcGxhdGVcIlxuICAgICAgICA+PC9Mb2FkaW5nQ29tcG9uZW50PlxuICAgICAgPC9kaXY+XG4gICAgICA8VHJlZU5vZGVEcm9wU2xvdFxuICAgICAgICBbZHJvcEluZGV4XT1cIm5vZGVJbmRleCArIDFcIlxuICAgICAgICBbbm9kZV09XCJub2RlLnBhcmVudFwiXG4gICAgICAgID48L1RyZWVOb2RlRHJvcFNsb3Q+XG4gICAgPC9kaXY+XG4gIGBcbn0sIF0gfSxcbl07XG4vKiogQG5vY29sbGFwc2UgKi9cbnN0YXRpYyBjdG9yUGFyYW1ldGVyczogKHt0eXBlOiBhbnksIGRlY29yYXRvcnM/OiBEZWNvcmF0b3JJbnZvY2F0aW9uW119fG51bGwpW10gPSBbXG57dHlwZTogRWxlbWVudFJlZiwgfSxcbl07XG5zdGF0aWMgcHJvcERlY29yYXRvcnM6IHtba2V5OiBzdHJpbmddOiBEZWNvcmF0b3JJbnZvY2F0aW9uW119ID0ge1xuJ25vZGUnOiBbeyB0eXBlOiBJbnB1dCB9LF0sXG4nbm9kZUluZGV4JzogW3sgdHlwZTogSW5wdXQgfSxdLFxuJ3RyZWVOb2RlQ29udGVudFRlbXBsYXRlJzogW3sgdHlwZTogSW5wdXQgfSxdLFxuJ2xvYWRpbmdUZW1wbGF0ZSc6IFt7IHR5cGU6IElucHV0IH0sXSxcbn07XG59XG5cbmludGVyZmFjZSBEZWNvcmF0b3JJbnZvY2F0aW9uIHtcbiAgdHlwZTogRnVuY3Rpb247XG4gIGFyZ3M/OiBhbnlbXTtcbn1cbiJdfQ==