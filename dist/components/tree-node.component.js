"use strict";
var core_1 = require('@angular/core');
var TreeNodeComponent = (function () {
    function TreeNodeComponent(elementRef) {
        this.elementRef = elementRef;
    }
    TreeNodeComponent.prototype.onDrop = function ($event) {
        this.node.mouseAction('drop', $event.event, {
            from: $event.element,
            to: { parent: this.node, index: 0 }
        });
    };
    TreeNodeComponent.prototype.allowDrop = function (element) {
        if (this.node.options.readOnly)
            return false;
        return this.node.options.allowDrop(element, { parent: this.node, index: 0 });
    };
    TreeNodeComponent.prototype.getNodePadding = function () {
        return this.node.options.levelPadding * (this.node.level - 1) + 'px';
    };
    TreeNodeComponent.prototype.ngAfterViewInit = function () {
        this.node.elementRef = this.elementRef;
    };
    TreeNodeComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'TreeNode',
                    encapsulation: core_1.ViewEncapsulation.None,
                    styles: [
                        '.tree-children.tree-children-no-padding { padding-left: 0 }',
                        '.tree-children { padding-left: 10px }',
                        ".node-content-wrapper {\n      display: flex;\n      padding: 2px 5px;\n    }",
                        '.node-wrapper { display: block }',
                        '.node-wrapper span { vertical-align: middle; line-height: 1.5em }',
                        '.tree-node-active > .node-wrapper > .node-content-wrapper { background: #beebff }',
                        '.tree-node-active.tree-node-focused > .node-wrapper > .node-content-wrapper { background: #beebff }',
                        '.tree-node-focused > .node-wrapper > .node-content-wrapper { background: #e7f4f9 }',
                        '.node-content-wrapper:hover { background: #f7fbff }',
                        '.tree-node-active > .node-wrapper > .node-content-wrapper, .tree-node-focused > .node-content-wrapper, .node-content-wrapper:hover { box-shadow: inset 0 0 1px #999; }',
                        '.node-content-wrapper.is-dragging-over { background: #ddffee; box-shadow: inset 0 0 1px #999; }',
                        '.node-content-wrapper.is-dragging-over-disabled { opacity: 0.5 }',
                        ".toggle-children {\n        display: flex;\n        margin-right: 3px;\n    }",
                        ".toggle-children-placeholder {\n        display: flex;\n        margin-right: 2px;\n    }"
                    ],
                    template: "\n    <div\n      *ngIf=\"!node.isHidden\"\n      class=\"tree-node tree-node-level-{{ node.level }}\"\n      [class.tree-node-expanded]=\"node.isExpanded && node.isFolder\"\n      [class.tree-node-collapsed]=\"node.isCollapsed && node.isFolder\"\n      [class.tree-node-leaf]=\"node.isLeaf\"\n      [class.tree-node-active]=\"node.isActive\"\n      [class.tree-node-focused]=\"node.isFocused\">\n\n      <TreeNodeDropSlot\n        *ngIf=\"nodeIndex === 0\"\n        [dropIndex]=\"nodeIndex\"\n        [node]=\"node.parent\"\n        ></TreeNodeDropSlot>\n\n        <div class=\"node-wrapper\" [style.padding-left]=\"getNodePadding()\">\n          \n          <div class=\"node-content-wrapper\"\n            #nodeContentWrapper\n            (click)=\"node.mouseAction('click', $event)\"\n            (dblclick)=\"node.mouseAction('dblClick', $event)\"\n            (contextmenu)=\"node.mouseAction('contextMenu', $event)\"\n            (treeDrop)=\"onDrop($event)\"\n            [treeAllowDrop]=\"allowDrop.bind(this)\"\n            [treeDrag]=\"node\"\n            [treeDragEnabled]=\"node.allowDrag()\">\n            <span\n              *ngIf=\"node.isFolder\"\n              class=\"toggle-children-wrapper\"\n              (click)=\"node.mouseAction('expanderClick', $event)\">\n              <span class=\"toggle-children\"><i class=\"material-icons\">{{ node.isExpanded ? 'folder_open' : 'folder' }}</i></span>\n            </span>\n            <span\n              *ngIf=\"!node.isFolder\"\n              class=\"toggle-children-placeholder\">\n              <i class=\"material-icons\">insert_drive_file</i>\n            </span>\n            <TreeNodeContent [node]=\"node\" [treeNodeContentTemplate]=\"treeNodeContentTemplate\"></TreeNodeContent>\n          </div>\n        </div>\n\n      <div [class.tree-children]=\"true\"\n           [class.tree-children-no-padding]=\"node.options.levelPadding\"\n           *ngIf=\"node.isExpanded\">\n        <div *ngIf=\"node.children\">\n          <TreeNode\n            *ngFor=\"let node of node.children; let i = index\"\n            [node]=\"node\"\n            [nodeIndex]=\"i\"\n            [treeNodeContentTemplate]=\"treeNodeContentTemplate\"\n            [loadingTemplate]=\"loadingTemplate\">\n          </TreeNode>\n        </div>\n        <LoadingComponent\n          [style.padding-left]=\"getNodePadding()\"\n          class=\"tree-node-loading\"\n          *ngIf=\"!node.children\"\n          [loadingTemplate]=\"loadingTemplate\"\n        ></LoadingComponent>\n      </div>\n      <TreeNodeDropSlot\n        [dropIndex]=\"nodeIndex + 1\"\n        [node]=\"node.parent\"\n        ></TreeNodeDropSlot>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    TreeNodeComponent.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
    ]; };
    TreeNodeComponent.propDecorators = {
        'node': [{ type: core_1.Input },],
        'nodeIndex': [{ type: core_1.Input },],
        'treeNodeContentTemplate': [{ type: core_1.Input },],
        'loadingTemplate': [{ type: core_1.Input },],
    };
    return TreeNodeComponent;
}());
exports.TreeNodeComponent = TreeNodeComponent;
//# sourceMappingURL=data:application/json;base64,